// Code generated by github.com/weblfe/gorm_gen. DO NOT EDIT.
package query

import (
	"context"

	"gorm.io/gorm"

	"gorm.io/gorm/schema"

	"gorm.io/gorm/clause"

	gen "github.com/weblfe/gorm_gen"
	"github.com/weblfe/gorm_gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/weblfe/gorm_gen/tests/.gen/dal_4/model"
)

// createMethod
func newCustomers(db *gorm.DB, opts ...gen.DOOption) customers {
	_customers := customers{}

	_customers.customersDo.UseDB(db, opts...)
	_customers.customersDo.UseModel(&model.Customers{})

	tableName := _customers.customersDo.TableName()
	_customers.ALL = field.NewAsterisk(tableName)
	_customers.ID = field.NewInt64(tableName, "id")
	_customers.CreatedAt = field.NewTime(tableName, "created_at")
	_customers.UpdatedAt = field.NewTime(tableName, "updated_at")
	_customers.DeletedAt = field.NewField(tableName, "deleted_at")
	_customers.BankID = field.NewInt64(tableName, "bank_id")

	_customers.fillFieldMap()

	return _customers
}

// customers struct
type customers struct {
	customersDo
	ALL       field.Asterisk
	ID        field.Int64
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	BankID    field.Int64

	fieldMap map[string]field.Expr
}

// Table tableMethod
func (c customers) Table(newTableName string) *customers {
	c.customersDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

// As asMethod
func (c customers) As(alias string) *customers {
	c.customersDo.DO = *(c.customersDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

// updateMethod
func (c *customers) updateTableName(table string) *customers {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.DeletedAt = field.NewField(table, "deleted_at")
	c.BankID = field.NewInt64(table, "bank_id")

	c.fillFieldMap()

	return c
}

// WithContext method
func (c *customers) WithContext(ctx context.Context) ICustomersDo {
	return c.customersDo.WithContext(ctx)
}

// TableName table name
func (c customers) TableName() string {
	return c.customersDo.TableName()
}

// Alias method
func (c customers) Alias() string {
	return c.customersDo.Alias()
}

// GetFieldByName getFieldMethod
func (c *customers) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

// fillFieldMapMethod
func (c *customers) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 5)
	c.fieldMap["id"] = c.ID
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
	c.fieldMap["bank_id"] = c.BankID
}

// cloneMethod
func (c customers) clone(db *gorm.DB) customers {
	c.customersDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

// replaceMethod
func (c customers) replaceDB(db *gorm.DB) customers {
	c.customersDo.ReplaceDB(db)
	return c
}

// relationship
type customersDo struct{ gen.DO }

// ICustomersDo interface
type ICustomersDo interface {
	gen.SubQuery
	Debug() ICustomersDo
	WithContext(ctx context.Context) ICustomersDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICustomersDo
	WriteDB() ICustomersDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICustomersDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conditions ...clause.Expression) ICustomersDo
	Not(conditions ...gen.Condition) ICustomersDo
	Or(conditions ...gen.Condition) ICustomersDo
	Select(conditions ...field.Expr) ICustomersDo
	Where(conditions ...gen.Condition) ICustomersDo
	Order(conditions ...field.Expr) ICustomersDo
	Distinct(cols ...field.Expr) ICustomersDo
	Omit(cols ...field.Expr) ICustomersDo
	Join(table schema.Tabler, on ...field.Expr) ICustomersDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICustomersDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICustomersDo
	Group(cols ...field.Expr) ICustomersDo
	Having(conditions ...gen.Condition) ICustomersDo
	Limit(limit int) ICustomersDo
	Offset(offset int) ICustomersDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICustomersDo
	Unscoped() ICustomersDo
	Create(values ...*model.Customers) error
	CreateInBatches(values []*model.Customers, batchSize int) error
	Save(values ...*model.Customers) error
	First() (*model.Customers, error)
	Take() (*model.Customers, error)
	Last() (*model.Customers, error)
	Find() ([]*model.Customers, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Customers, err error)
	FindInBatches(result *[]*model.Customers, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Customers) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICustomersDo
	Assign(attrs ...field.AssignExpr) ICustomersDo
	Joins(fields ...field.RelationField) ICustomersDo
	Preload(fields ...field.RelationField) ICustomersDo
	FirstOrInit() (*model.Customers, error)
	FirstOrCreate() (*model.Customers, error)
	FindByPage(offset int, limit int) (result []*model.Customers, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICustomersDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c customersDo) Debug() ICustomersDo {
	return c.withDO(c.DO.Debug())
}

func (c customersDo) WithContext(ctx context.Context) ICustomersDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c customersDo) ReadDB() ICustomersDo {
	return c.Clauses(dbresolver.Read)
}

func (c customersDo) WriteDB() ICustomersDo {
	return c.Clauses(dbresolver.Write)
}

func (c customersDo) Session(config *gorm.Session) ICustomersDo {
	return c.withDO(c.DO.Session(config))
}

func (c customersDo) Clauses(conds ...clause.Expression) ICustomersDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c customersDo) Returning(value interface{}, columns ...string) ICustomersDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c customersDo) Not(conds ...gen.Condition) ICustomersDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c customersDo) Or(conds ...gen.Condition) ICustomersDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c customersDo) Select(conds ...field.Expr) ICustomersDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c customersDo) Where(conds ...gen.Condition) ICustomersDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c customersDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ICustomersDo {
	return c.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (c customersDo) Order(conds ...field.Expr) ICustomersDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c customersDo) Distinct(cols ...field.Expr) ICustomersDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c customersDo) Omit(cols ...field.Expr) ICustomersDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c customersDo) Join(table schema.Tabler, on ...field.Expr) ICustomersDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c customersDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICustomersDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c customersDo) RightJoin(table schema.Tabler, on ...field.Expr) ICustomersDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c customersDo) Group(cols ...field.Expr) ICustomersDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c customersDo) Having(conds ...gen.Condition) ICustomersDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c customersDo) Limit(limit int) ICustomersDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c customersDo) Offset(offset int) ICustomersDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c customersDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICustomersDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c customersDo) Unscoped() ICustomersDo {
	return c.withDO(c.DO.Unscoped())
}

func (c customersDo) Create(values ...*model.Customers) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c customersDo) CreateInBatches(values []*model.Customers, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c customersDo) Save(values ...*model.Customers) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c customersDo) First() (*model.Customers, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Customers), nil
	}
}

func (c customersDo) Take() (*model.Customers, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Customers), nil
	}
}

func (c customersDo) Last() (*model.Customers, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Customers), nil
	}
}

func (c customersDo) Find() ([]*model.Customers, error) {
	result, err := c.DO.Find()
	return result.([]*model.Customers), err
}

func (c customersDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Customers, err error) {
	buf := make([]*model.Customers, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c customersDo) FindInBatches(result *[]*model.Customers, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c customersDo) Attrs(attrs ...field.AssignExpr) ICustomersDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c customersDo) Assign(attrs ...field.AssignExpr) ICustomersDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c customersDo) Joins(fields ...field.RelationField) ICustomersDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c customersDo) Preload(fields ...field.RelationField) ICustomersDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c customersDo) FirstOrInit() (*model.Customers, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Customers), nil
	}
}

func (c customersDo) FirstOrCreate() (*model.Customers, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Customers), nil
	}
}

func (c customersDo) FindByPage(offset int, limit int) (result []*model.Customers, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c customersDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c customersDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c customersDo) Delete(models ...*model.Customers) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *customersDo) withDO(do gen.Dao) *customersDo {
	c.DO = *do.(*gen.DO)
	return c
}
