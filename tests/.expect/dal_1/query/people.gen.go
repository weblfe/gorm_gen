// Code generated by github.com/weblfe/gorm_gen. DO NOT EDIT.
package query

import (
	"context"

	"gorm.io/gorm"

	"gorm.io/gorm/schema"

	"gorm.io/gorm/clause"

	gen "github.com/weblfe/gorm_gen"
	"github.com/weblfe/gorm_gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/weblfe/gorm_gen/tests/.gen/dal_1/model"
)

// createMethod
func newPeople(db *gorm.DB, opts ...gen.DOOption) people {
	_people := people{}

	_people.peopleDo.UseDB(db, opts...)
	_people.peopleDo.UseModel(&model.People{})

	tableName := _people.peopleDo.TableName()
	_people.ALL = field.NewAsterisk(tableName)
	_people.ID = field.NewInt64(tableName, "id")
	_people.Name = field.NewString(tableName, "name")
	_people.Alias_ = field.NewString(tableName, "alias")
	_people.Age = field.NewInt32(tableName, "age")
	_people.Flag = field.NewBool(tableName, "flag")
	_people.AnotherFlag = field.NewInt32(tableName, "another_flag")
	_people.Commit = field.NewString(tableName, "commit")
	_people.First = field.NewBool(tableName, "First")
	_people.Bit = field.NewField(tableName, "bit")
	_people.Small = field.NewInt32(tableName, "small")
	_people.DeletedAt = field.NewField(tableName, "deleted_at")
	_people.Score = field.NewFloat64(tableName, "score")
	_people.Number = field.NewInt32(tableName, "number")
	_people.Birth = field.NewTime(tableName, "birth")
	_people.XMLHTTPRequest = field.NewString(tableName, "xmlHTTPRequest")
	_people.JStr = field.NewString(tableName, "jStr")
	_people.Geo = field.NewString(tableName, "geo")
	_people.Mint = field.NewInt32(tableName, "mint")
	_people.Blank = field.NewString(tableName, "blank")
	_people.Remark = field.NewString(tableName, "remark")
	_people.LongRemark = field.NewString(tableName, "long_remark")

	_people.fillFieldMap()

	return _people
}

// people struct
type people struct {
	peopleDo
	ALL            field.Asterisk
	ID             field.Int64
	Name           field.String
	Alias_         field.String
	Age            field.Int32
	Flag           field.Bool
	AnotherFlag    field.Int32
	Commit         field.String
	First          field.Bool
	Bit            field.Field
	Small          field.Int32
	DeletedAt      field.Field
	Score          field.Float64
	Number         field.Int32
	Birth          field.Time
	XMLHTTPRequest field.String
	JStr           field.String
	Geo            field.String
	Mint           field.Int32
	Blank          field.String
	Remark         field.String
	LongRemark     field.String

	fieldMap map[string]field.Expr
}

// Table tableMethod
func (p people) Table(newTableName string) *people {
	p.peopleDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

// As asMethod
func (p people) As(alias string) *people {
	p.peopleDo.DO = *(p.peopleDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

// updateMethod
func (p *people) updateTableName(table string) *people {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.Name = field.NewString(table, "name")
	p.Alias_ = field.NewString(table, "alias")
	p.Age = field.NewInt32(table, "age")
	p.Flag = field.NewBool(table, "flag")
	p.AnotherFlag = field.NewInt32(table, "another_flag")
	p.Commit = field.NewString(table, "commit")
	p.First = field.NewBool(table, "First")
	p.Bit = field.NewField(table, "bit")
	p.Small = field.NewInt32(table, "small")
	p.DeletedAt = field.NewField(table, "deleted_at")
	p.Score = field.NewFloat64(table, "score")
	p.Number = field.NewInt32(table, "number")
	p.Birth = field.NewTime(table, "birth")
	p.XMLHTTPRequest = field.NewString(table, "xmlHTTPRequest")
	p.JStr = field.NewString(table, "jStr")
	p.Geo = field.NewString(table, "geo")
	p.Mint = field.NewInt32(table, "mint")
	p.Blank = field.NewString(table, "blank")
	p.Remark = field.NewString(table, "remark")
	p.LongRemark = field.NewString(table, "long_remark")

	p.fillFieldMap()

	return p
}

// WithContext method
func (p *people) WithContext(ctx context.Context) *peopleDo {
	return p.peopleDo.WithContext(ctx)
}

// TableName table name
func (p people) TableName() string {
	return p.peopleDo.TableName()
}

// Alias method
func (p people) Alias() string {
	return p.peopleDo.Alias()
}

// GetFieldByName getFieldMethod
func (p *people) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

// fillFieldMapMethod
func (p *people) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 21)
	p.fieldMap["id"] = p.ID
	p.fieldMap["name"] = p.Name
	p.fieldMap["alias"] = p.Alias_
	p.fieldMap["age"] = p.Age
	p.fieldMap["flag"] = p.Flag
	p.fieldMap["another_flag"] = p.AnotherFlag
	p.fieldMap["commit"] = p.Commit
	p.fieldMap["First"] = p.First
	p.fieldMap["bit"] = p.Bit
	p.fieldMap["small"] = p.Small
	p.fieldMap["deleted_at"] = p.DeletedAt
	p.fieldMap["score"] = p.Score
	p.fieldMap["number"] = p.Number
	p.fieldMap["birth"] = p.Birth
	p.fieldMap["xmlHTTPRequest"] = p.XMLHTTPRequest
	p.fieldMap["jStr"] = p.JStr
	p.fieldMap["geo"] = p.Geo
	p.fieldMap["mint"] = p.Mint
	p.fieldMap["blank"] = p.Blank
	p.fieldMap["remark"] = p.Remark
	p.fieldMap["long_remark"] = p.LongRemark
}

// cloneMethod
func (p people) clone(db *gorm.DB) people {
	p.peopleDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

// replaceMethod
func (p people) replaceDB(db *gorm.DB) people {
	p.peopleDo.ReplaceDB(db)
	return p
}

// relationship
type peopleDo struct{ gen.DO }

func (p peopleDo) Debug() *peopleDo {
	return p.withDO(p.DO.Debug())
}

func (p peopleDo) WithContext(ctx context.Context) *peopleDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p peopleDo) ReadDB() *peopleDo {
	return p.Clauses(dbresolver.Read)
}

func (p peopleDo) WriteDB() *peopleDo {
	return p.Clauses(dbresolver.Write)
}

func (p peopleDo) Session(config *gorm.Session) *peopleDo {
	return p.withDO(p.DO.Session(config))
}

func (p peopleDo) Clauses(conds ...clause.Expression) *peopleDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p peopleDo) Returning(value interface{}, columns ...string) *peopleDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p peopleDo) Not(conds ...gen.Condition) *peopleDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p peopleDo) Or(conds ...gen.Condition) *peopleDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p peopleDo) Select(conds ...field.Expr) *peopleDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p peopleDo) Where(conds ...gen.Condition) *peopleDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p peopleDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *peopleDo {
	return p.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (p peopleDo) Order(conds ...field.Expr) *peopleDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p peopleDo) Distinct(cols ...field.Expr) *peopleDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p peopleDo) Omit(cols ...field.Expr) *peopleDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p peopleDo) Join(table schema.Tabler, on ...field.Expr) *peopleDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p peopleDo) LeftJoin(table schema.Tabler, on ...field.Expr) *peopleDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p peopleDo) RightJoin(table schema.Tabler, on ...field.Expr) *peopleDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p peopleDo) Group(cols ...field.Expr) *peopleDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p peopleDo) Having(conds ...gen.Condition) *peopleDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p peopleDo) Limit(limit int) *peopleDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p peopleDo) Offset(offset int) *peopleDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p peopleDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *peopleDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p peopleDo) Unscoped() *peopleDo {
	return p.withDO(p.DO.Unscoped())
}

func (p peopleDo) Create(values ...*model.People) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p peopleDo) CreateInBatches(values []*model.People, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p peopleDo) Save(values ...*model.People) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p peopleDo) First() (*model.People, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.People), nil
	}
}

func (p peopleDo) Take() (*model.People, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.People), nil
	}
}

func (p peopleDo) Last() (*model.People, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.People), nil
	}
}

func (p peopleDo) Find() ([]*model.People, error) {
	result, err := p.DO.Find()
	return result.([]*model.People), err
}

func (p peopleDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.People, err error) {
	buf := make([]*model.People, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p peopleDo) FindInBatches(result *[]*model.People, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p peopleDo) Attrs(attrs ...field.AssignExpr) *peopleDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p peopleDo) Assign(attrs ...field.AssignExpr) *peopleDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p peopleDo) Joins(fields ...field.RelationField) *peopleDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p peopleDo) Preload(fields ...field.RelationField) *peopleDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p peopleDo) FirstOrInit() (*model.People, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.People), nil
	}
}

func (p peopleDo) FirstOrCreate() (*model.People, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.People), nil
	}
}

func (p peopleDo) FindByPage(offset int, limit int) (result []*model.People, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p peopleDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p peopleDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p peopleDo) Delete(models ...*model.People) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *peopleDo) withDO(do gen.Dao) *peopleDo {
	p.DO = *do.(*gen.DO)
	return p
}
