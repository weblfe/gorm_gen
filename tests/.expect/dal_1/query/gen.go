// Code generated by github.com/weblfe/gorm_gen. DO NOT EDIT.
package query

import (
	"context"

	"database/sql"

	gen "github.com/weblfe/gorm_gen"
	"gorm.io/gorm"

	"gorm.io/plugin/dbresolver"
)

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:          db,
		Banks:       newBanks(db, opts...),
		CreditCards: newCreditCards(db, opts...),
		Customers:   newCustomers(db, opts...),
		People:      newPeople(db, opts...),
		Users:       newUsers(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Banks       banks
	CreditCards creditCards
	Customers   customers
	People      people
	Users       users
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:          db,
		Banks:       q.Banks.clone(db),
		CreditCards: q.CreditCards.clone(db),
		Customers:   q.Customers.clone(db),
		People:      q.People.clone(db),
		Users:       q.Users.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:          db,
		Banks:       q.Banks.replaceDB(db),
		CreditCards: q.CreditCards.replaceDB(db),
		Customers:   q.Customers.replaceDB(db),
		People:      q.People.replaceDB(db),
		Users:       q.Users.replaceDB(db),
	}
}

type queryCtx struct {
	Banks       *banksDo
	CreditCards *creditCardsDo
	Customers   *customersDo
	People      *peopleDo
	Users       *usersDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Banks:       q.Banks.WithContext(ctx),
		CreditCards: q.CreditCards.WithContext(ctx),
		Customers:   q.Customers.WithContext(ctx),
		People:      q.People.WithContext(ctx),
		Users:       q.Users.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	return &QueryTx{q.clone(q.db.Begin(opts...))}
}

type QueryTx struct{ *Query }

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
