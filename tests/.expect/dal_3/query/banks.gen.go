// Code generated by github.com/weblfe/gorm_gen. DO NOT EDIT.
package query

import (
	"context"

	"gorm.io/gorm"

	"gorm.io/gorm/schema"

	"gorm.io/gorm/clause"

	gen "github.com/weblfe/gorm_gen"
	"github.com/weblfe/gorm_gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/weblfe/gorm_gen/tests/.gen/dal_3/model"
)

// createMethod
func newBanks(db *gorm.DB, opts ...gen.DOOption) banks {
	_banks := banks{}

	_banks.banksDo.UseDB(db, opts...)
	_banks.banksDo.UseModel(&model.Banks{})

	tableName := _banks.banksDo.TableName()
	_banks.ALL = field.NewAsterisk(tableName)
	_banks.ID = field.NewInt64(tableName, "id")
	_banks.Name = field.NewString(tableName, "name")
	_banks.Address = field.NewString(tableName, "address")
	_banks.Scale = field.NewInt64(tableName, "scale")

	_banks.fillFieldMap()

	return _banks
}

// banks struct
type banks struct {
	banksDo
	ALL     field.Asterisk
	ID      field.Int64
	Name    field.String
	Address field.String
	Scale   field.Int64

	fieldMap map[string]field.Expr
}

// Table tableMethod
func (b banks) Table(newTableName string) *banks {
	b.banksDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

// As asMethod
func (b banks) As(alias string) *banks {
	b.banksDo.DO = *(b.banksDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

// updateMethod
func (b *banks) updateTableName(table string) *banks {
	b.ALL = field.NewAsterisk(table)
	b.ID = field.NewInt64(table, "id")
	b.Name = field.NewString(table, "name")
	b.Address = field.NewString(table, "address")
	b.Scale = field.NewInt64(table, "scale")

	b.fillFieldMap()

	return b
}

// WithContext method
func (b *banks) WithContext(ctx context.Context) IBanksDo {
	return b.banksDo.WithContext(ctx)
}

// TableName table name
func (b banks) TableName() string {
	return b.banksDo.TableName()
}

// Alias method
func (b banks) Alias() string {
	return b.banksDo.Alias()
}

// GetFieldByName getFieldMethod
func (b *banks) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

// fillFieldMapMethod
func (b *banks) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 4)
	b.fieldMap["id"] = b.ID
	b.fieldMap["name"] = b.Name
	b.fieldMap["address"] = b.Address
	b.fieldMap["scale"] = b.Scale
}

// cloneMethod
func (b banks) clone(db *gorm.DB) banks {
	b.banksDo.ReplaceConnPool(db.Statement.ConnPool)
	return b
}

// replaceMethod
func (b banks) replaceDB(db *gorm.DB) banks {
	b.banksDo.ReplaceDB(db)
	return b
}

// relationship
type banksDo struct{ gen.DO }

// IBanksDo interface
type IBanksDo interface {
	gen.SubQuery
	Debug() IBanksDo
	WithContext(ctx context.Context) IBanksDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IBanksDo
	WriteDB() IBanksDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IBanksDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conditions ...clause.Expression) IBanksDo
	Not(conditions ...gen.Condition) IBanksDo
	Or(conditions ...gen.Condition) IBanksDo
	Select(conditions ...field.Expr) IBanksDo
	Where(conditions ...gen.Condition) IBanksDo
	Order(conditions ...field.Expr) IBanksDo
	Distinct(cols ...field.Expr) IBanksDo
	Omit(cols ...field.Expr) IBanksDo
	Join(table schema.Tabler, on ...field.Expr) IBanksDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IBanksDo
	RightJoin(table schema.Tabler, on ...field.Expr) IBanksDo
	Group(cols ...field.Expr) IBanksDo
	Having(conditions ...gen.Condition) IBanksDo
	Limit(limit int) IBanksDo
	Offset(offset int) IBanksDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IBanksDo
	Unscoped() IBanksDo
	Create(values ...*model.Banks) error
	CreateInBatches(values []*model.Banks, batchSize int) error
	Save(values ...*model.Banks) error
	First() (*model.Banks, error)
	Take() (*model.Banks, error)
	Last() (*model.Banks, error)
	Find() ([]*model.Banks, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Banks, err error)
	FindInBatches(result *[]*model.Banks, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Banks) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IBanksDo
	Assign(attrs ...field.AssignExpr) IBanksDo
	Joins(fields ...field.RelationField) IBanksDo
	Preload(fields ...field.RelationField) IBanksDo
	FirstOrInit() (*model.Banks, error)
	FirstOrCreate() (*model.Banks, error)
	FindByPage(offset int, limit int) (result []*model.Banks, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IBanksDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (b banksDo) Debug() IBanksDo {
	return b.withDO(b.DO.Debug())
}

func (b banksDo) WithContext(ctx context.Context) IBanksDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b banksDo) ReadDB() IBanksDo {
	return b.Clauses(dbresolver.Read)
}

func (b banksDo) WriteDB() IBanksDo {
	return b.Clauses(dbresolver.Write)
}

func (b banksDo) Session(config *gorm.Session) IBanksDo {
	return b.withDO(b.DO.Session(config))
}

func (b banksDo) Clauses(conds ...clause.Expression) IBanksDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b banksDo) Returning(value interface{}, columns ...string) IBanksDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b banksDo) Not(conds ...gen.Condition) IBanksDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b banksDo) Or(conds ...gen.Condition) IBanksDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b banksDo) Select(conds ...field.Expr) IBanksDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b banksDo) Where(conds ...gen.Condition) IBanksDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b banksDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IBanksDo {
	return b.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (b banksDo) Order(conds ...field.Expr) IBanksDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b banksDo) Distinct(cols ...field.Expr) IBanksDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b banksDo) Omit(cols ...field.Expr) IBanksDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b banksDo) Join(table schema.Tabler, on ...field.Expr) IBanksDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b banksDo) LeftJoin(table schema.Tabler, on ...field.Expr) IBanksDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b banksDo) RightJoin(table schema.Tabler, on ...field.Expr) IBanksDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b banksDo) Group(cols ...field.Expr) IBanksDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b banksDo) Having(conds ...gen.Condition) IBanksDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b banksDo) Limit(limit int) IBanksDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b banksDo) Offset(offset int) IBanksDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b banksDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IBanksDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b banksDo) Unscoped() IBanksDo {
	return b.withDO(b.DO.Unscoped())
}

func (b banksDo) Create(values ...*model.Banks) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b banksDo) CreateInBatches(values []*model.Banks, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b banksDo) Save(values ...*model.Banks) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b banksDo) First() (*model.Banks, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Banks), nil
	}
}

func (b banksDo) Take() (*model.Banks, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Banks), nil
	}
}

func (b banksDo) Last() (*model.Banks, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Banks), nil
	}
}

func (b banksDo) Find() ([]*model.Banks, error) {
	result, err := b.DO.Find()
	return result.([]*model.Banks), err
}

func (b banksDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Banks, err error) {
	buf := make([]*model.Banks, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b banksDo) FindInBatches(result *[]*model.Banks, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b banksDo) Attrs(attrs ...field.AssignExpr) IBanksDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b banksDo) Assign(attrs ...field.AssignExpr) IBanksDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b banksDo) Joins(fields ...field.RelationField) IBanksDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b banksDo) Preload(fields ...field.RelationField) IBanksDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b banksDo) FirstOrInit() (*model.Banks, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Banks), nil
	}
}

func (b banksDo) FirstOrCreate() (*model.Banks, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Banks), nil
	}
}

func (b banksDo) FindByPage(offset int, limit int) (result []*model.Banks, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b banksDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b banksDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b banksDo) Delete(models ...*model.Banks) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *banksDo) withDO(do gen.Dao) *banksDo {
	b.DO = *do.(*gen.DO)
	return b
}
