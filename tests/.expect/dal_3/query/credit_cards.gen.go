// Code generated by github.com/weblfe/gorm_gen. DO NOT EDIT.
package query

import (
	"context"

	"gorm.io/gorm"

	"gorm.io/gorm/schema"

	"gorm.io/gorm/clause"

	gen "github.com/weblfe/gorm_gen"
	"github.com/weblfe/gorm_gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/weblfe/gorm_gen/tests/.gen/dal_3/model"
)

// createMethod
func newCreditCards(db *gorm.DB, opts ...gen.DOOption) creditCards {
	_creditCards := creditCards{}

	_creditCards.creditCardsDo.UseDB(db, opts...)
	_creditCards.creditCardsDo.UseModel(&model.CreditCards{})

	tableName := _creditCards.creditCardsDo.TableName()
	_creditCards.ALL = field.NewAsterisk(tableName)
	_creditCards.ID = field.NewInt64(tableName, "id")
	_creditCards.CreatedAt = field.NewTime(tableName, "created_at")
	_creditCards.UpdatedAt = field.NewTime(tableName, "updated_at")
	_creditCards.DeletedAt = field.NewField(tableName, "deleted_at")
	_creditCards.Number = field.NewString(tableName, "number")
	_creditCards.CustomerRefer = field.NewInt64(tableName, "customer_refer")
	_creditCards.BankID = field.NewInt64(tableName, "bank_id")

	_creditCards.fillFieldMap()

	return _creditCards
}

// creditCards struct
type creditCards struct {
	creditCardsDo
	ALL           field.Asterisk
	ID            field.Int64
	CreatedAt     field.Time
	UpdatedAt     field.Time
	DeletedAt     field.Field
	Number        field.String
	CustomerRefer field.Int64
	BankID        field.Int64

	fieldMap map[string]field.Expr
}

// Table tableMethod
func (c creditCards) Table(newTableName string) *creditCards {
	c.creditCardsDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

// As asMethod
func (c creditCards) As(alias string) *creditCards {
	c.creditCardsDo.DO = *(c.creditCardsDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

// updateMethod
func (c *creditCards) updateTableName(table string) *creditCards {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.DeletedAt = field.NewField(table, "deleted_at")
	c.Number = field.NewString(table, "number")
	c.CustomerRefer = field.NewInt64(table, "customer_refer")
	c.BankID = field.NewInt64(table, "bank_id")

	c.fillFieldMap()

	return c
}

// WithContext method
func (c *creditCards) WithContext(ctx context.Context) ICreditCardsDo {
	return c.creditCardsDo.WithContext(ctx)
}

// TableName table name
func (c creditCards) TableName() string {
	return c.creditCardsDo.TableName()
}

// Alias method
func (c creditCards) Alias() string {
	return c.creditCardsDo.Alias()
}

// GetFieldByName getFieldMethod
func (c *creditCards) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

// fillFieldMapMethod
func (c *creditCards) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 7)
	c.fieldMap["id"] = c.ID
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
	c.fieldMap["number"] = c.Number
	c.fieldMap["customer_refer"] = c.CustomerRefer
	c.fieldMap["bank_id"] = c.BankID
}

// cloneMethod
func (c creditCards) clone(db *gorm.DB) creditCards {
	c.creditCardsDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

// replaceMethod
func (c creditCards) replaceDB(db *gorm.DB) creditCards {
	c.creditCardsDo.ReplaceDB(db)
	return c
}

// relationship
type creditCardsDo struct{ gen.DO }

// ICreditCardsDo interface
type ICreditCardsDo interface {
	gen.SubQuery
	Debug() ICreditCardsDo
	WithContext(ctx context.Context) ICreditCardsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICreditCardsDo
	WriteDB() ICreditCardsDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICreditCardsDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conditions ...clause.Expression) ICreditCardsDo
	Not(conditions ...gen.Condition) ICreditCardsDo
	Or(conditions ...gen.Condition) ICreditCardsDo
	Select(conditions ...field.Expr) ICreditCardsDo
	Where(conditions ...gen.Condition) ICreditCardsDo
	Order(conditions ...field.Expr) ICreditCardsDo
	Distinct(cols ...field.Expr) ICreditCardsDo
	Omit(cols ...field.Expr) ICreditCardsDo
	Join(table schema.Tabler, on ...field.Expr) ICreditCardsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICreditCardsDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICreditCardsDo
	Group(cols ...field.Expr) ICreditCardsDo
	Having(conditions ...gen.Condition) ICreditCardsDo
	Limit(limit int) ICreditCardsDo
	Offset(offset int) ICreditCardsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICreditCardsDo
	Unscoped() ICreditCardsDo
	Create(values ...*model.CreditCards) error
	CreateInBatches(values []*model.CreditCards, batchSize int) error
	Save(values ...*model.CreditCards) error
	First() (*model.CreditCards, error)
	Take() (*model.CreditCards, error)
	Last() (*model.CreditCards, error)
	Find() ([]*model.CreditCards, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CreditCards, err error)
	FindInBatches(result *[]*model.CreditCards, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.CreditCards) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICreditCardsDo
	Assign(attrs ...field.AssignExpr) ICreditCardsDo
	Joins(fields ...field.RelationField) ICreditCardsDo
	Preload(fields ...field.RelationField) ICreditCardsDo
	FirstOrInit() (*model.CreditCards, error)
	FirstOrCreate() (*model.CreditCards, error)
	FindByPage(offset int, limit int) (result []*model.CreditCards, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICreditCardsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c creditCardsDo) Debug() ICreditCardsDo {
	return c.withDO(c.DO.Debug())
}

func (c creditCardsDo) WithContext(ctx context.Context) ICreditCardsDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c creditCardsDo) ReadDB() ICreditCardsDo {
	return c.Clauses(dbresolver.Read)
}

func (c creditCardsDo) WriteDB() ICreditCardsDo {
	return c.Clauses(dbresolver.Write)
}

func (c creditCardsDo) Session(config *gorm.Session) ICreditCardsDo {
	return c.withDO(c.DO.Session(config))
}

func (c creditCardsDo) Clauses(conds ...clause.Expression) ICreditCardsDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c creditCardsDo) Returning(value interface{}, columns ...string) ICreditCardsDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c creditCardsDo) Not(conds ...gen.Condition) ICreditCardsDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c creditCardsDo) Or(conds ...gen.Condition) ICreditCardsDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c creditCardsDo) Select(conds ...field.Expr) ICreditCardsDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c creditCardsDo) Where(conds ...gen.Condition) ICreditCardsDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c creditCardsDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ICreditCardsDo {
	return c.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (c creditCardsDo) Order(conds ...field.Expr) ICreditCardsDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c creditCardsDo) Distinct(cols ...field.Expr) ICreditCardsDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c creditCardsDo) Omit(cols ...field.Expr) ICreditCardsDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c creditCardsDo) Join(table schema.Tabler, on ...field.Expr) ICreditCardsDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c creditCardsDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICreditCardsDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c creditCardsDo) RightJoin(table schema.Tabler, on ...field.Expr) ICreditCardsDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c creditCardsDo) Group(cols ...field.Expr) ICreditCardsDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c creditCardsDo) Having(conds ...gen.Condition) ICreditCardsDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c creditCardsDo) Limit(limit int) ICreditCardsDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c creditCardsDo) Offset(offset int) ICreditCardsDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c creditCardsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICreditCardsDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c creditCardsDo) Unscoped() ICreditCardsDo {
	return c.withDO(c.DO.Unscoped())
}

func (c creditCardsDo) Create(values ...*model.CreditCards) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c creditCardsDo) CreateInBatches(values []*model.CreditCards, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c creditCardsDo) Save(values ...*model.CreditCards) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c creditCardsDo) First() (*model.CreditCards, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CreditCards), nil
	}
}

func (c creditCardsDo) Take() (*model.CreditCards, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CreditCards), nil
	}
}

func (c creditCardsDo) Last() (*model.CreditCards, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CreditCards), nil
	}
}

func (c creditCardsDo) Find() ([]*model.CreditCards, error) {
	result, err := c.DO.Find()
	return result.([]*model.CreditCards), err
}

func (c creditCardsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CreditCards, err error) {
	buf := make([]*model.CreditCards, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c creditCardsDo) FindInBatches(result *[]*model.CreditCards, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c creditCardsDo) Attrs(attrs ...field.AssignExpr) ICreditCardsDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c creditCardsDo) Assign(attrs ...field.AssignExpr) ICreditCardsDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c creditCardsDo) Joins(fields ...field.RelationField) ICreditCardsDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c creditCardsDo) Preload(fields ...field.RelationField) ICreditCardsDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c creditCardsDo) FirstOrInit() (*model.CreditCards, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CreditCards), nil
	}
}

func (c creditCardsDo) FirstOrCreate() (*model.CreditCards, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CreditCards), nil
	}
}

func (c creditCardsDo) FindByPage(offset int, limit int) (result []*model.CreditCards, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c creditCardsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c creditCardsDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c creditCardsDo) Delete(models ...*model.CreditCards) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *creditCardsDo) withDO(do gen.Dao) *creditCardsDo {
	c.DO = *do.(*gen.DO)
	return c
}
