// Code generated by github.com/weblfe/gorm_gen. DO NOT EDIT.
package query

import (
	"context"

	"gorm.io/gorm"

	"gorm.io/gorm/schema"

	"gorm.io/gorm/clause"

	gen "github.com/weblfe/gorm_gen"
	"github.com/weblfe/gorm_gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/weblfe/gorm_gen/tests/.gen/dal_2/model"
)

// createMethod
func newBanks(db *gorm.DB, opts ...gen.DOOption) banks {
	_banks := banks{}

	_banks.banksDo.UseDB(db, opts...)
	_banks.banksDo.UseModel(&model.Banks{})

	tableName := _banks.banksDo.TableName()
	_banks.ALL = field.NewAsterisk(tableName)
	_banks.ID = field.NewInt64(tableName, "id")
	_banks.Name = field.NewString(tableName, "name")
	_banks.Address = field.NewString(tableName, "address")
	_banks.Scale = field.NewInt64(tableName, "scale")

	_banks.fillFieldMap()

	return _banks
}

// banks struct
type banks struct {
	banksDo
	ALL     field.Asterisk
	ID      field.Int64
	Name    field.String
	Address field.String
	Scale   field.Int64

	fieldMap map[string]field.Expr
}

// Table tableMethod
func (b banks) Table(newTableName string) *banks {
	b.banksDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

// As asMethod
func (b banks) As(alias string) *banks {
	b.banksDo.DO = *(b.banksDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

// updateMethod
func (b *banks) updateTableName(table string) *banks {
	b.ALL = field.NewAsterisk(table)
	b.ID = field.NewInt64(table, "id")
	b.Name = field.NewString(table, "name")
	b.Address = field.NewString(table, "address")
	b.Scale = field.NewInt64(table, "scale")

	b.fillFieldMap()

	return b
}

// WithContext method
func (b *banks) WithContext(ctx context.Context) *banksDo {
	return b.banksDo.WithContext(ctx)
}

// TableName table name
func (b banks) TableName() string {
	return b.banksDo.TableName()
}

// Alias method
func (b banks) Alias() string {
	return b.banksDo.Alias()
}

// GetFieldByName getFieldMethod
func (b *banks) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

// fillFieldMapMethod
func (b *banks) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 4)
	b.fieldMap["id"] = b.ID
	b.fieldMap["name"] = b.Name
	b.fieldMap["address"] = b.Address
	b.fieldMap["scale"] = b.Scale
}

// cloneMethod
func (b banks) clone(db *gorm.DB) banks {
	b.banksDo.ReplaceConnPool(db.Statement.ConnPool)
	return b
}

// replaceMethod
func (b banks) replaceDB(db *gorm.DB) banks {
	b.banksDo.ReplaceDB(db)
	return b
}

// relationship
type banksDo struct{ gen.DO }

func (b banksDo) Debug() *banksDo {
	return b.withDO(b.DO.Debug())
}

func (b banksDo) WithContext(ctx context.Context) *banksDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b banksDo) ReadDB() *banksDo {
	return b.Clauses(dbresolver.Read)
}

func (b banksDo) WriteDB() *banksDo {
	return b.Clauses(dbresolver.Write)
}

func (b banksDo) Session(config *gorm.Session) *banksDo {
	return b.withDO(b.DO.Session(config))
}

func (b banksDo) Clauses(conds ...clause.Expression) *banksDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b banksDo) Returning(value interface{}, columns ...string) *banksDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b banksDo) Not(conds ...gen.Condition) *banksDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b banksDo) Or(conds ...gen.Condition) *banksDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b banksDo) Select(conds ...field.Expr) *banksDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b banksDo) Where(conds ...gen.Condition) *banksDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b banksDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *banksDo {
	return b.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (b banksDo) Order(conds ...field.Expr) *banksDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b banksDo) Distinct(cols ...field.Expr) *banksDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b banksDo) Omit(cols ...field.Expr) *banksDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b banksDo) Join(table schema.Tabler, on ...field.Expr) *banksDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b banksDo) LeftJoin(table schema.Tabler, on ...field.Expr) *banksDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b banksDo) RightJoin(table schema.Tabler, on ...field.Expr) *banksDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b banksDo) Group(cols ...field.Expr) *banksDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b banksDo) Having(conds ...gen.Condition) *banksDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b banksDo) Limit(limit int) *banksDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b banksDo) Offset(offset int) *banksDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b banksDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *banksDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b banksDo) Unscoped() *banksDo {
	return b.withDO(b.DO.Unscoped())
}

func (b banksDo) Create(values ...*model.Banks) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b banksDo) CreateInBatches(values []*model.Banks, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b banksDo) Save(values ...*model.Banks) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b banksDo) First() (*model.Banks, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Banks), nil
	}
}

func (b banksDo) Take() (*model.Banks, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Banks), nil
	}
}

func (b banksDo) Last() (*model.Banks, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Banks), nil
	}
}

func (b banksDo) Find() ([]*model.Banks, error) {
	result, err := b.DO.Find()
	return result.([]*model.Banks), err
}

func (b banksDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Banks, err error) {
	buf := make([]*model.Banks, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b banksDo) FindInBatches(result *[]*model.Banks, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b banksDo) Attrs(attrs ...field.AssignExpr) *banksDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b banksDo) Assign(attrs ...field.AssignExpr) *banksDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b banksDo) Joins(fields ...field.RelationField) *banksDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b banksDo) Preload(fields ...field.RelationField) *banksDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b banksDo) FirstOrInit() (*model.Banks, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Banks), nil
	}
}

func (b banksDo) FirstOrCreate() (*model.Banks, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Banks), nil
	}
}

func (b banksDo) FindByPage(offset int, limit int) (result []*model.Banks, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b banksDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b banksDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b banksDo) Delete(models ...*model.Banks) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *banksDo) withDO(do gen.Dao) *banksDo {
	b.DO = *do.(*gen.DO)
	return b
}
